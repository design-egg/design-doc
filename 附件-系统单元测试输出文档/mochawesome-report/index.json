{
  "stats": {
    "suites": 14,
    "tests": 31,
    "passes": 31,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-11T03:35:37.769Z",
    "end": "2019-05-11T03:35:38.869Z",
    "duration": 1100,
    "testsRegistered": 31,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "067daa06-275c-4766-a359-04fe22809168",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 289,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "app.ready()",
        "err": {},
        "isRoot": true,
        "uuid": "a16ac0ec-6b09-4b77-9d76-7a26954782ca",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [
      {
        "title": "\"after each\" hook",
        "fullTitle": "\"after each\" hook",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "app.backgroundTasksFinished()",
        "err": {},
        "isRoot": true,
        "uuid": "59038674-94bf-4b8e-836d-3db65e777d39",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"after each\" hook: restore",
        "fullTitle": "\"after each\" hook: restore",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "cluster.restore();\nmm.restore();",
        "err": {},
        "isRoot": true,
        "uuid": "7c2e5cc6-772b-4fd4-9ed4-a8430167df6f",
        "isHook": true,
        "skipped": false
      }
    ],
    "tests": [],
    "suites": [
      {
        "uuid": "7356ffb8-caf2-4b65-b215-cf86d22a5c67",
        "title": "test/app/controller/course.test.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/controller/course.test.js",
        "file": "/test/app/controller/course.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "GET /api/course 获取所有的课程信息",
            "fullTitle": "test/app/controller/course.test.js GET /api/course 获取所有的课程信息",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get('/api/course').set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "882484d0-62e5-43a0-9ef7-8151d6b9e08c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "POST /api/course 添加课程信息",
            "fullTitle": "test/app/controller/course.test.js POST /api/course 添加课程信息",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst result = await app.httpRequest().post('/api/course').send(COURSE[payload.index]).set('authorization', ACCESS_TOKEN);\nassert(_rec1._expr(_rec1._capt(_rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/left/left/object').status, 'arguments/0/left/left') === 200, 'arguments/0/left') || _rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/right/left/object').status, 'arguments/0/right/left') === 422, 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(result.status === 200 || result.status === 422)',\n    filepath: 'test/app/controller/course.test.js',\n    line: 29,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "ae389ca4-a3e8-4152-bfd6-e0566f0c738d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "GET /api/course/:id 根据课程编号来获取课程信息",
            "fullTitle": "test/app/controller/course.test.js GET /api/course/:id 根据课程编号来获取课程信息",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get(`/api/course/${ COURSE[payload.index].c_id }`).set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "a06d17de-4b53-4981-8d26-d96eacd0e486",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "882484d0-62e5-43a0-9ef7-8151d6b9e08c",
          "ae389ca4-a3e8-4152-bfd6-e0566f0c738d",
          "a06d17de-4b53-4981-8d26-d96eacd0e486"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 70,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "c6652ff2-8eda-48f9-9cef-a70be1d9d8ca",
        "title": "test/app/controller/current.test.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/controller/current.test.js",
        "file": "/test/app/controller/current.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "GET /api/user/current 获取用户个人的详细信息",
            "fullTitle": "test/app/controller/current.test.js GET /api/user/current 获取用户个人的详细信息",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get('/api/user/current').set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "f95a7094-baee-4dd0-9d0f-aee20fceb8de",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f95a7094-baee-4dd0-9d0f-aee20fceb8de"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "bc897633-fac4-4a1e-9aeb-e77f12aa0e53",
        "title": "test/app/controller/dept.test.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/controller/dept.test.js",
        "file": "/test/app/controller/dept.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "GET /api/dept 获取所有的院系信息",
            "fullTitle": "test/app/controller/dept.test.js GET /api/dept 获取所有的院系信息",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get('/api/dept').set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "3c33c1ec-f44f-463e-b000-672c0d1643ef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "POST /api/dept 添加院系信息",
            "fullTitle": "test/app/controller/dept.test.js POST /api/dept 添加院系信息",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst result = await app.httpRequest().post('/api/dept').send(DEPT[payload.index]).set('authorization', ACCESS_TOKEN);\nassert(_rec1._expr(_rec1._capt(_rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/left/left/object').status, 'arguments/0/left/left') === 200, 'arguments/0/left') || _rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/right/left/object').status, 'arguments/0/right/left') === 422, 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(result.status === 200 || result.status === 422)',\n    filepath: 'test/app/controller/dept.test.js',\n    line: 29,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "b1e7e8d7-92fb-4071-9ccd-760285e552b4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "GET /api/dept/:id 根据院系编号来获取院系信息",
            "fullTitle": "test/app/controller/dept.test.js GET /api/dept/:id 根据院系编号来获取院系信息",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get(`/api/dept/${ DEPT[payload.index].d_id }`).set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "ca16245d-748e-4498-abdb-38e87b161b33",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3c33c1ec-f44f-463e-b000-672c0d1643ef",
          "b1e7e8d7-92fb-4071-9ccd-760285e552b4",
          "ca16245d-748e-4498-abdb-38e87b161b33"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 25,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "0c63d3c1-ab7f-4f47-9f16-fba025cea029",
        "title": "test/app/controller/major.test.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/controller/major.test.js",
        "file": "/test/app/controller/major.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "GET /api/major 获取所有的专业信息",
            "fullTitle": "test/app/controller/major.test.js GET /api/major 获取所有的专业信息",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get('/api/major').set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "b6a8b30c-0736-4ee7-9cb0-817e4d5dda39",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "POST /api/major 添加专业信息",
            "fullTitle": "test/app/controller/major.test.js POST /api/major 添加专业信息",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst result = await app.httpRequest().post('/api/major').send(MAJOR[payload.index]).set('authorization', ACCESS_TOKEN);\nassert(_rec1._expr(_rec1._capt(_rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/left/left/object').status, 'arguments/0/left/left') === 200, 'arguments/0/left') || _rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/right/left/object').status, 'arguments/0/right/left') === 422, 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(result.status === 200 || result.status === 422)',\n    filepath: 'test/app/controller/major.test.js',\n    line: 29,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "ba20311f-afb5-48f7-bc29-f7cd6e30faf6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "GET /api/major/:id 根据专业编号来获取专业信息",
            "fullTitle": "test/app/controller/major.test.js GET /api/major/:id 根据专业编号来获取专业信息",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get(`/api/major/${ MAJOR[payload.index].m_id }`).set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "d7cf5c57-b2f3-41e8-bf80-1886d98c53da",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b6a8b30c-0736-4ee7-9cb0-817e4d5dda39",
          "ba20311f-afb5-48f7-bc29-f7cd6e30faf6",
          "d7cf5c57-b2f3-41e8-bf80-1886d98c53da"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 34,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "57692bdb-f474-4828-93d8-0044b63b4867",
        "title": "test/app/controller/student.test.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/controller/student.test.js",
        "file": "/test/app/controller/student.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "GET /api/student 获取所有的学生信息",
            "fullTitle": "test/app/controller/student.test.js GET /api/student 获取所有的学生信息",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get('/api/student').set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "0d09cc0f-c1be-4ed6-b8dd-e6e4f4387983",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "POST /api/student 添加学生信息",
            "fullTitle": "test/app/controller/student.test.js POST /api/student 添加学生信息",
            "timedOut": false,
            "duration": 94,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst result = await app.httpRequest().post('/api/student').send(STUDENT[payload.index]).set('authorization', ACCESS_TOKEN);\nassert(_rec1._expr(_rec1._capt(_rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/left/left/object').status, 'arguments/0/left/left') === 200, 'arguments/0/left') || _rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/right/left/object').status, 'arguments/0/right/left') === 422, 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(result.status === 200 || result.status === 422)',\n    filepath: 'test/app/controller/student.test.js',\n    line: 29,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "4708bebf-20ef-4be5-9ef1-fe3314ba0aff",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "GET /api/student/:id 根据学生学号来获取学生信息",
            "fullTitle": "test/app/controller/student.test.js GET /api/student/:id 根据学生学号来获取学生信息",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get(`/api/student/${ STUDENT[payload.index].s_id }`).set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "0bbe6e68-6835-4293-992f-a01e408c36e6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0d09cc0f-c1be-4ed6-b8dd-e6e4f4387983",
          "4708bebf-20ef-4be5-9ef1-fe3314ba0aff",
          "0bbe6e68-6835-4293-992f-a01e408c36e6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 116,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "2785e4cb-fbe1-42cf-8740-f69342699649",
        "title": "test/app/controller/studentCourse.test.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/controller/studentCourse.test.js",
        "file": "/test/app/controller/studentCourse.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "GET /api/student-course 获取所有的选课信息",
            "fullTitle": "test/app/controller/studentCourse.test.js GET /api/student-course 获取所有的选课信息",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get('/api/student-course').set('authorization', ACCESS_TOKEN);",
            "err": {},
            "isRoot": false,
            "uuid": "ca5ab384-d526-4b06-acbb-4a6dc937f06d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "POST /api/student-course 添加选课信息",
            "fullTitle": "test/app/controller/studentCourse.test.js POST /api/student-course 添加选课信息",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst result = await app.httpRequest().post('/api/student-course').send(STUDENT_COURSE[payload.index]).set('authorization', ACCESS_TOKEN);\nassert(_rec1._expr(_rec1._capt(_rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/left/left/object').status, 'arguments/0/left/left') === 200, 'arguments/0/left') || _rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/right/left/object').status, 'arguments/0/right/left') === 422, 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(result.status === 200 || result.status === 422)',\n    filepath: 'test/app/controller/studentCourse.test.js',\n    line: 28,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "ba8cc531-2396-41c3-9bf6-ca51a76fefd7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ca5ab384-d526-4b06-acbb-4a6dc937f06d",
          "ba8cc531-2396-41c3-9bf6-ca51a76fefd7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 49,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "7018d875-3569-42aa-977f-9246482a82c8",
        "title": "test/app/controller/teacher.test.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/controller/teacher.test.js",
        "file": "/test/app/controller/teacher.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "GET /api/teacher 获取所有的教师信息",
            "fullTitle": "test/app/controller/teacher.test.js GET /api/teacher 获取所有的教师信息",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get('/api/teacher').set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "df18ea54-55e9-4f6f-a9bd-6f27444c1b1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "POST /api/teacher 添加教师信息",
            "fullTitle": "test/app/controller/teacher.test.js POST /api/teacher 添加教师信息",
            "timedOut": false,
            "duration": 78,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst result = await app.httpRequest().post('/api/teacher').send(TEACHER[payload.index]).set('authorization', ACCESS_TOKEN);\nassert(_rec1._expr(_rec1._capt(_rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/left/left/object').status, 'arguments/0/left/left') === 200, 'arguments/0/left') || _rec1._capt(_rec1._capt(_rec1._capt(result, 'arguments/0/right/left/object').status, 'arguments/0/right/left') === 422, 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(result.status === 200 || result.status === 422)',\n    filepath: 'test/app/controller/teacher.test.js',\n    line: 29,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "adb4a1b2-1604-4703-a095-df5f5e6da816",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "GET /api/teacher/:id 根据教师工号来获取教师信息",
            "fullTitle": "test/app/controller/teacher.test.js GET /api/teacher/:id 根据教师工号来获取教师信息",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return await app.httpRequest().get(`/api/teacher/${ TEACHER[payload.index].t_id }`).set('authorization', ACCESS_TOKEN).expect(200);",
            "err": {},
            "isRoot": false,
            "uuid": "13239774-0995-4d16-aa0e-e6fb302a31ce",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "df18ea54-55e9-4f6f-a9bd-6f27444c1b1f",
          "adb4a1b2-1604-4703-a095-df5f5e6da816",
          "13239774-0995-4d16-aa0e-e6fb302a31ce"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 97,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "b8e2f8df-1749-45d3-a7a6-95f1c2025676",
        "title": "test/app/service/course.tets.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/service/course.test.js",
        "file": "/test/app/service/course.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "CourseService.findAllCourse",
            "fullTitle": "test/app/service/course.tets.js CourseService.findAllCourse",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({\n    'current|1-20': 1,\n    'pageSize|1': [\n        10,\n        20,\n        30,\n        40\n    ]\n});\nconst course = await ctx.service.course.findAllCourse(payload);\nassert(_rec1._expr(_rec1._capt(course, 'arguments/0'), {\n    content: 'assert(course)',\n    filepath: 'test/app/service/course.test.js',\n    line: 19,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "78b9d909-aaee-47f1-b21d-0b6fd4d08153",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "CourseService.findCourseByCid",
            "fullTitle": "test/app/service/course.tets.js CourseService.findCourseByCid",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec2 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({ 'index|0-19': 0 });\nconst course = await ctx.service.course.findCourseByCid(COURSE[payload.index].c_id);\nassert(_rec2._expr(_rec2._capt(_rec2._capt(course, 'arguments/0/left') || _rec2._capt(!_rec2._capt(course, 'arguments/0/right/argument'), 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(course || !course)',\n    filepath: 'test/app/service/course.test.js',\n    line: 31,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "880c3e43-c0a3-4730-80d0-17e70370b035",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "78b9d909-aaee-47f1-b21d-0b6fd4d08153",
          "880c3e43-c0a3-4730-80d0-17e70370b035"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "116fc6fd-178f-4e08-a32e-9aea7b990393",
        "title": "test/app/service/dept.tets.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/service/dept.test.js",
        "file": "/test/app/service/dept.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "DeptService.findAllDept",
            "fullTitle": "test/app/service/dept.tets.js DeptService.findAllDept",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({\n    'current|1-20': 1,\n    'pageSize|1': [\n        10,\n        20,\n        30,\n        40\n    ]\n});\nconst dept = await ctx.service.dept.findAllDept(payload);\nassert(_rec1._expr(_rec1._capt(dept, 'arguments/0'), {\n    content: 'assert(dept)',\n    filepath: 'test/app/service/dept.test.js',\n    line: 19,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "6a02933b-af6a-423b-a493-507cd8cdbdbf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "DeptService.findDeptByMid",
            "fullTitle": "test/app/service/dept.tets.js DeptService.findDeptByMid",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec2 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({ 'index|0-19': 0 });\nconst dept = await ctx.service.dept.findDeptByDid(DEPT[payload.index].d_id);\nassert(_rec2._expr(_rec2._capt(_rec2._capt(dept, 'arguments/0/left') || _rec2._capt(!_rec2._capt(dept, 'arguments/0/right/argument'), 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(dept || !dept)',\n    filepath: 'test/app/service/dept.test.js',\n    line: 31,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "e9ecb41b-2f67-4c6f-a4ec-07e8105add44",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6a02933b-af6a-423b-a493-507cd8cdbdbf",
          "e9ecb41b-2f67-4c6f-a4ec-07e8105add44"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "01ec4ce4-bd26-4289-a245-e84fd7aab4a9",
        "title": "test/app/service/jwt.tets.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/service/jwt.test.js",
        "file": "/test/app/service/jwt.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "JwtService.createToken",
            "fullTitle": "test/app/service/jwt.tets.js JwtService.createToken",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst jwt = await ctx.service.jwt.createToken(ADMIN);\nassert(_rec1._expr(_rec1._capt(jwt, 'arguments/0'), {\n    content: 'assert(jwt)',\n    filepath: 'test/app/service/jwt.test.js',\n    line: 11,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "fe29797d-e1bc-458d-8c2d-3da62e60e82a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "JwtService.verifyToken",
            "fullTitle": "test/app/service/jwt.tets.js JwtService.verifyToken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec2 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst jwt = await ctx.service.jwt.verifyToken(ACCESS_TOKEN.replace('Bearer ', ''));\nassert(_rec2._expr(_rec2._capt(jwt, 'arguments/0'), {\n    content: 'assert(jwt)',\n    filepath: 'test/app/service/jwt.test.js',\n    line: 18,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "e476a639-710b-42fd-9afb-c09cff7d4ca8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "fe29797d-e1bc-458d-8c2d-3da62e60e82a",
          "e476a639-710b-42fd-9afb-c09cff7d4ca8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "7153c2c9-aa95-45f2-a0b3-8db13800dd7d",
        "title": "test/app/service/major.tets.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/service/major.test.js",
        "file": "/test/app/service/major.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "MajorService.findAllMajor",
            "fullTitle": "test/app/service/major.tets.js MajorService.findAllMajor",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({\n    'current|1-20': 1,\n    'pageSize|1': [\n        10,\n        20,\n        30,\n        40\n    ]\n});\nconst major = await ctx.service.major.findAllMajor(payload);\nassert(_rec1._expr(_rec1._capt(major, 'arguments/0'), {\n    content: 'assert(major)',\n    filepath: 'test/app/service/major.test.js',\n    line: 18,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "2011168b-0908-4f00-abd3-4c72854ff2d0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "MajorService.findMajorByMid",
            "fullTitle": "test/app/service/major.tets.js MajorService.findMajorByMid",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec2 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({ 'index|0-19': 0 });\nconst course = await ctx.service.major.findMajorByMid(MAJOR[payload.index].m_id);\nassert(_rec2._expr(_rec2._capt(_rec2._capt(course, 'arguments/0/left') || _rec2._capt(!_rec2._capt(course, 'arguments/0/right/argument'), 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(course || !course)',\n    filepath: 'test/app/service/major.test.js',\n    line: 29,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "0bb06195-8b6b-4a6b-a546-e05b3c86d237",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2011168b-0908-4f00-abd3-4c72854ff2d0",
          "0bb06195-8b6b-4a6b-a546-e05b3c86d237"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "c1667d98-eb91-437e-8808-3d182cb3515f",
        "title": "test/app/service/student.tets.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/service/student.test.js",
        "file": "/test/app/service/student.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "StudentService.findAllStudent",
            "fullTitle": "test/app/service/student.tets.js StudentService.findAllStudent",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({\n    'current|1-20': 1,\n    'pageSize|1': [\n        10,\n        20,\n        30,\n        40\n    ]\n});\nconst student = await ctx.service.student.findAllStudent(payload);\nassert(_rec1._expr(_rec1._capt(student, 'arguments/0'), {\n    content: 'assert(student)',\n    filepath: 'test/app/service/student.test.js',\n    line: 19,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "de4f8f15-1be1-4de1-8c3d-efbaf5acb9ad",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "StudentService.findStudentBySid",
            "fullTitle": "test/app/service/student.tets.js StudentService.findStudentBySid",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec2 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({ 'index|0-19': 0 });\nconst student = await ctx.service.student.findStudentBySid(STUDENT[payload.index].s_id);\nassert(_rec2._expr(_rec2._capt(_rec2._capt(student, 'arguments/0/left') || _rec2._capt(!_rec2._capt(student, 'arguments/0/right/argument'), 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(student || !student)',\n    filepath: 'test/app/service/student.test.js',\n    line: 30,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "b4d54cb3-a9a2-4505-b395-5da0dc602e5f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "de4f8f15-1be1-4de1-8c3d-efbaf5acb9ad",
          "b4d54cb3-a9a2-4505-b395-5da0dc602e5f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "84e55c58-5f2a-4c4c-afa0-bbb0f42c8fb5",
        "title": "test/app/service/studentCourse.tets.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/service/studentCourse.test.js",
        "file": "/test/app/service/studentCourse.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "CourseService.findAllCourse",
            "fullTitle": "test/app/service/studentCourse.tets.js CourseService.findAllCourse",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({\n    'current|1-20': 1,\n    'pageSize|1': [\n        10,\n        20,\n        30,\n        40\n    ],\n    'gte|0-100': 0,\n    'le|0-100': 0\n});\nconst studentCourse = await ctx.service.studentCourse.findAllStudentCourse(payload);\nassert(_rec1._expr(_rec1._capt(studentCourse, 'arguments/0'), {\n    content: 'assert(studentCourse)',\n    filepath: 'test/app/service/studentCourse.test.js',\n    line: 20,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "aad9ba25-7a23-4c33-9e5e-a0c8b806368b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "aad9ba25-7a23-4c33-9e5e-a0c8b806368b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      },
      {
        "uuid": "21b1f609-6dc8-4f07-9586-9d260606e341",
        "title": "test/app/service/teacher.tets.js",
        "fullFile": "/Users/codeman/design/student_elective_system/test/app/service/teacher.test.js",
        "file": "/test/app/service/teacher.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "TeacherService.findAllTeacher",
            "fullTitle": "test/app/service/teacher.tets.js TeacherService.findAllTeacher",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec1 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({\n    'current|1-20': 1,\n    'pageSize|1': [\n        10,\n        20,\n        30,\n        40\n    ]\n});\nconst teacher = await ctx.service.teacher.findAllTeacher(payload);\nassert(_rec1._expr(_rec1._capt(teacher, 'arguments/0'), {\n    content: 'assert(teacher)',\n    filepath: 'test/app/service/teacher.test.js',\n    line: 18,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "15095355-7388-40bc-9141-ca94b5eb1389",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "TeacherService.findTeacherByTid",
            "fullTitle": "test/app/service/teacher.tets.js TeacherService.findTeacherByTid",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var _rec2 = new _PowerAssertRecorder1();\nconst ctx = app.mockContext();\nconst payload = Mock.mock({ 'index|0-19': 0 });\nconst teacher = await ctx.service.teacher.findTeacherByTid(TEACHER[payload.index].t_id);\nassert(_rec2._expr(_rec2._capt(_rec2._capt(teacher, 'arguments/0/left') || _rec2._capt(!_rec2._capt(teacher, 'arguments/0/right/argument'), 'arguments/0/right'), 'arguments/0'), {\n    content: 'assert(teacher || !teacher)',\n    filepath: 'test/app/service/teacher.test.js',\n    line: 29,\n    async: true\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "14858ac6-0c52-4623-898f-781fce449692",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "15095355-7388-40bc-9141-ca94b5eb1389",
          "14858ac6-0c52-4623-898f-781fce449692"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 60000
  },
  "copyrightYear": 2019
}